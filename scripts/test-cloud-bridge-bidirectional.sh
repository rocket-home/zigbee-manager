#!/usr/bin/env bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ –æ–±–ª–∞—á–Ω—ã–π MQTT –º–æ—Å—Ç
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –õ–æ–∫–∞–ª—å–Ω—ã–π -> –û–±–ª–∞—á–Ω—ã–π –∏ –û–±–ª–∞—á–Ω—ã–π -> –õ–æ–∫–∞–ª—å–Ω—ã–π

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
if [ ! -f .env ]; then
    error "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
source .env

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if [ -z "$CLOUD_MQTT_HOST" ] || [ -z "$CLOUD_MQTT_PORT" ] || [ -z "$CLOUD_MQTT_USERNAME" ] || [ -z "$CLOUD_MQTT_PASSWORD" ]; then
    error "–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ CLOUD_MQTT_* –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ—Å—Ç–∞
if [ "$CLOUD_MQTT_ENABLED" != "true" ]; then
    warning "–û–±–ª–∞—á–Ω—ã–π MQTT –º–æ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω –≤ .env"
    echo "–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make cloud-mqtt-enable"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ MQTT –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
if ! docker ps | grep -q "mqtt-broker"; then
    error "MQTT –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã: make start"
    exit 1
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞
LOCAL_HOST="localhost"
LOCAL_PORT="1883"
LOCAL_USERNAME="admin"
LOCAL_PASSWORD="admin"
CLOUD_HOST="$CLOUD_MQTT_HOST"
CLOUD_PORT="$CLOUD_MQTT_PORT"
CLOUD_USERNAME="$CLOUD_MQTT_USERNAME"
CLOUD_PASSWORD="$CLOUD_MQTT_PASSWORD"

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ø–∏–∫–∏ Zigbee2MQTT –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
TEST_TOPIC="zigbee2mqtt/bridge/test"
TEST_MESSAGE="Test message from $(date '+%Y-%m-%d %H:%M:%S')"
TEST_CLIENT_ID="test-client-$$"
TIMEOUT=10

# –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
TEMP_DIR=$(mktemp -d)
LOCAL_RECEIVED="$TEMP_DIR/local_received.txt"
CLOUD_RECEIVED="$TEMP_DIR/cloud_received.txt"
LOCAL_PUBLISHED="$TEMP_DIR/local_published.txt"
CLOUD_PUBLISHED="$TEMP_DIR/cloud_published.txt"

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
cleanup() {
    log "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    rm -rf "$TEMP_DIR"
    # –£–±–∏–≤–∞–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã mosquitto_sub
    pkill -f "mosquitto_sub.*$TEST_TOPIC" 2>/dev/null || true
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap cleanup EXIT INT TERM

echo "=========================================="
echo "üåê –¢–µ—Å—Ç –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"
echo "   —á–µ—Ä–µ–∑ –æ–±–ª–∞—á–Ω—ã–π MQTT –º–æ—Å—Ç"
echo "=========================================="
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ—Å—Ç–∞ –≤ –ª–æ–≥–∞—Ö
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–ª–∞—á–Ω–æ–≥–æ –º–æ—Å—Ç–∞..."
BRIDGE_STATUS=$(docker logs mqtt-broker --tail 50 2>/dev/null | grep -E "(bridge.*CONNACK|bridge.*connected|bridge.*error)" | tail -1)

if echo "$BRIDGE_STATUS" | grep -q "CONNACK"; then
    success "–û–±–ª–∞—á–Ω—ã–π –º–æ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω"
elif echo "$BRIDGE_STATUS" | grep -q "error\|failed"; then
    error "–û–±–ª–∞—á–Ω—ã–π –º–æ—Å—Ç –∏–º–µ–µ—Ç –æ—à–∏–±–∫–∏: $BRIDGE_STATUS"
    exit 1
else
    warning "–°—Ç–∞—Ç—É—Å –º–æ—Å—Ç–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç..."
fi

echo ""

# –¢–µ—Å—Ç 1: –õ–æ–∫–∞–ª—å–Ω—ã–π -> –û–±–ª–∞—á–Ω—ã–π
log "–¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ MQTT –≤ –æ–±–ª–∞—á–Ω—ã–π"
echo "   üì§ –õ–æ–∫–∞–ª—å–Ω—ã–π MQTT -> –û–±–ª–∞—á–Ω—ã–π MQTT"
echo "   –¢–æ–ø–∏–∫: $TEST_TOPIC"
echo "   –°–æ–æ–±—â–µ–Ω–∏–µ: $TEST_MESSAGE"
echo ""

# –ó–∞–ø—É—Å–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–ª–∞—á–Ω–æ–º MQTT
log "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–ª–∞—á–Ω–æ–º MQTT –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è..."
mosquitto_sub -h "$CLOUD_HOST" -p "$CLOUD_PORT" -u "$CLOUD_USERNAME" -P "$CLOUD_PASSWORD" \
    --cafile /etc/ssl/certs/ca-certificates.crt \
    -t "$TEST_TOPIC" -C 1 > "$CLOUD_RECEIVED" &
CLOUD_SUB_PID=$!

# –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
sleep 2

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π MQTT
log "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π MQTT..."
if mosquitto_pub -h "$LOCAL_HOST" -p "$LOCAL_PORT" -u "$LOCAL_USERNAME" -P "$LOCAL_PASSWORD" \
    -t "$TEST_TOPIC" -m "$TEST_MESSAGE" -i "$TEST_CLIENT_ID"; then
    success "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π MQTT"
    echo "$TEST_MESSAGE" > "$LOCAL_PUBLISHED"
else
    error "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π MQTT"
    kill $CLOUD_SUB_PID 2>/dev/null || true
    exit 1
fi

# –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ–±–ª–∞—á–Ω–æ–º MQTT
log "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ–±–ª–∞—á–Ω–æ–º MQTT..."
sleep 5

if [ -s "$CLOUD_RECEIVED" ]; then
    RECEIVED_MESSAGE=$(cat "$CLOUD_RECEIVED")
    if [ "$RECEIVED_MESSAGE" = "$TEST_MESSAGE" ]; then
        success "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∞ –æ–±–ª–∞—á–Ω–æ–º MQTT: $RECEIVED_MESSAGE"
    else
        error "‚ùå –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ–±–ª–∞—á–Ω–æ–º MQTT: $RECEIVED_MESSAGE"
    fi
else
    error "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∞ –æ–±–ª–∞—á–Ω–æ–º MQTT"
fi

# –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–ø–∏—Å–∫–∏
kill $CLOUD_SUB_PID 2>/dev/null || true

echo ""

# –¢–µ—Å—Ç 2: –û–±–ª–∞—á–Ω—ã–π -> –õ–æ–∫–∞–ª—å–Ω—ã–π
log "–¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ–±–ª–∞—á–Ω–æ–≥–æ MQTT –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π"
echo "   üì§ –û–±–ª–∞—á–Ω—ã–π MQTT -> –õ–æ–∫–∞–ª—å–Ω—ã–π MQTT"
echo "   –¢–æ–ø–∏–∫: $TEST_TOPIC"
echo "   –°–æ–æ–±—â–µ–Ω–∏–µ: $TEST_MESSAGE"
echo ""

# –ó–∞–ø—É—Å–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º MQTT
log "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º MQTT –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è..."
mosquitto_sub -h "$LOCAL_HOST" -p "$LOCAL_PORT" -u "$LOCAL_USERNAME" -P "$LOCAL_PASSWORD" \
    -t "$TEST_TOPIC" -C 1 > "$LOCAL_RECEIVED" &
LOCAL_SUB_PID=$!

# –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
sleep 2

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±–ª–∞—á–Ω—ã–π MQTT
log "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±–ª–∞—á–Ω—ã–π MQTT..."
if mosquitto_pub -h "$CLOUD_HOST" -p "$CLOUD_PORT" -u "$CLOUD_USERNAME" -P "$CLOUD_PASSWORD" \
    --cafile /etc/ssl/certs/ca-certificates.crt \
    -t "$TEST_TOPIC" -m "$TEST_MESSAGE" -i "$TEST_CLIENT_ID"; then
    success "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ–±–ª–∞—á–Ω—ã–π MQTT"
    echo "$TEST_MESSAGE" > "$CLOUD_PUBLISHED"
else
    error "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±–ª–∞—á–Ω—ã–π MQTT"
    kill $LOCAL_SUB_PID 2>/dev/null || true
    exit 1
fi

# –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º MQTT
log "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º MQTT..."
sleep 5

if [ -s "$LOCAL_RECEIVED" ]; then
    RECEIVED_MESSAGE=$(cat "$LOCAL_RECEIVED")
    if [ "$RECEIVED_MESSAGE" = "$TEST_MESSAGE" ]; then
        success "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º MQTT: $RECEIVED_MESSAGE"
    else
        error "‚ùå –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º MQTT: $RECEIVED_MESSAGE"
    fi
else
    error "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º MQTT"
fi

# –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–ø–∏—Å–∫–∏
kill $LOCAL_SUB_PID 2>/dev/null || true

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –º–æ—Å—Ç–∞
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –º–æ—Å—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏..."
BRIDGE_LOGS=$(docker logs mqtt-broker --tail 20 2>/dev/null | grep -E "(bridge.*PUBLISH|bridge.*SUBSCRIBE)" | tail -5)

if [ -n "$BRIDGE_LOGS" ]; then
    success "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ—Å—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤ –ª–æ–≥–∞—Ö:"
    echo "$BRIDGE_LOGS" | sed 's/^/   ‚Ä¢ /'
else
    warning "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ—Å—Ç–∞ –≤ –ª–æ–≥–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞"
fi

echo ""

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è Zigbee2MQTT –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è
log "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Zigbee2MQTT..."
ZIGBEE_MESSAGES=$(docker logs mqtt-broker --tail 50 2>/dev/null | grep -E "zigbee2mqtt.*PUBLISH" | tail -3)

if [ -n "$ZIGBEE_MESSAGES" ]; then
    success "–°–æ–æ–±—â–µ–Ω–∏—è Zigbee2MQTT –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è –≤ –æ–±–ª–∞–∫–æ:"
    echo "$ZIGBEE_MESSAGES" | sed 's/^/   ‚Ä¢ /'
else
    warning "–°–æ–æ–±—â–µ–Ω–∏—è Zigbee2MQTT –≤ –ª–æ–≥–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
fi

echo ""

# –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
log "–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"

LOCAL_TO_CLOUD_SUCCESS=false
CLOUD_TO_LOCAL_SUCCESS=false

if [ -s "$CLOUD_RECEIVED" ] && [ "$(cat "$CLOUD_RECEIVED")" = "$TEST_MESSAGE" ]; then
    LOCAL_TO_CLOUD_SUCCESS=true
fi

if [ -s "$LOCAL_RECEIVED" ] && [ "$(cat "$LOCAL_RECEIVED")" = "$TEST_MESSAGE" ]; then
    CLOUD_TO_LOCAL_SUCCESS=true
fi

echo "   üì§ –õ–æ–∫–∞–ª—å–Ω—ã–π -> –û–±–ª–∞—á–Ω—ã–π: $([ "$LOCAL_TO_CLOUD_SUCCESS" = true ] && echo "‚úÖ –£—Å–ø–µ—à–Ω–æ" || echo "‚ùå –ù–µ—É–¥–∞—á–Ω–æ")"
echo "   üì§ –û–±–ª–∞—á–Ω—ã–π -> –õ–æ–∫–∞–ª—å–Ω—ã–π: $([ "$CLOUD_TO_LOCAL_SUCCESS" = true ] && echo "‚úÖ –£—Å–ø–µ—à–Ω–æ" || echo "‚ùå –ù–µ—É–¥–∞—á–Ω–æ")"

if [ "$LOCAL_TO_CLOUD_SUCCESS" = true ] && [ "$CLOUD_TO_LOCAL_SUCCESS" = true ]; then
    echo ""
    success "üéâ –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
    success "–û–±–ª–∞—á–Ω—ã–π MQTT –º–æ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –≤ –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö."
    exit 0
else
    echo ""
    error "‚ùå –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."
    if [ "$LOCAL_TO_CLOUD_SUCCESS" = false ]; then
        echo "   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º: –õ–æ–∫–∞–ª—å–Ω—ã–π -> –û–±–ª–∞—á–Ω—ã–π"
    fi
    if [ "$CLOUD_TO_LOCAL_SUCCESS" = false ]; then
        echo "   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º: –û–±–ª–∞—á–Ω—ã–π -> –õ–æ–∫–∞–ª—å–Ω—ã–π"
    fi
    echo ""
    echo "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
    echo "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –º–æ—Å—Ç–∞: make logs-mqtt"
    echo "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –º–æ—Å—Ç–∞: make cloud-mqtt-status"
    echo "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: mqtt/config/bridge/cloud-bridge.conf"
    echo "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –º–æ—Å—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ç–æ–ø–∏–∫ # –≤ –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö"
    exit 1
fi 