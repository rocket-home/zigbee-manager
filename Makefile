# Makefile –¥–ª—è Zigbee2MQTT —Å MQTT Broker
# –ê–≤—Ç–æ—Ä: Zigbee Manager

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
DOCKER_COMPOSE_CMD := $(shell if command -v docker >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then echo "docker compose"; elif command -v docker-compose >/dev/null 2>&1; then echo "docker-compose"; else echo "docker-compose"; fi)
PROJECT_NAME := zigbee-manager
ENV_FILE := .env

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
BLUE := \033[0;34m
NC := \033[0m # No Color

.PHONY: help start stop restart status logs clean detect configure setup

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
	@echo "$(BLUE)Zigbee2MQTT —Å MQTT Broker - –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è$(NC)"
	@echo ""
	@echo "$(GREEN)–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(YELLOW)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(GREEN)–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞ Docker Compose:$(NC) $(DOCKER_COMPOSE_CMD)"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
setup: ## –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã
	@echo "$(BLUE)üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Zigbee2MQTT —Å MQTT Broker...$(NC)"
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(YELLOW)üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env –∏–∑ –ø—Ä–∏–º–µ—Ä–∞...$(NC)"; \
		cp env.example $(ENV_FILE); \
		echo "$(GREEN)‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã.$(NC)"; \
	else \
		echo "$(GREEN)‚úÖ –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.$(NC)"; \
	fi
	@echo "$(YELLOW)üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...$(NC)"
	@mkdir -p mqtt/config mqtt/data mqtt/log zigbee2mqtt/data scripts templates
	@echo "$(GREEN)‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã.$(NC)"
	@if [ ! -f zigbee2mqtt/data/configuration.yaml ]; then \
		echo "$(YELLOW)üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Zigbee2MQTT...$(NC)"; \
		cp zigbee2mqtt/data/configuration.yaml.example zigbee2mqtt/data/configuration.yaml 2>/dev/null || \
		echo "$(YELLOW)‚ö†Ô∏è  –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ make generate-config$(NC)"; \
	fi

# –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ Zigbee –∞–¥–∞–ø—Ç–µ—Ä–∞
detect: ## –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ Zigbee –∞–¥–∞–ø—Ç–µ—Ä—ã
	@echo "$(BLUE)üîç –ü–æ–∏—Å–∫ Zigbee –∞–¥–∞–ø—Ç–µ—Ä–æ–≤...$(NC)"
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ /dev/ttyACM*:$(NC)"
	@if ls /dev/ttyACM* 2>/dev/null; then \
		echo "$(GREEN)‚úÖ –ù–∞–π–¥–µ–Ω—ã –∞–¥–∞–ø—Ç–µ—Ä—ã –Ω–∞ /dev/ttyACM*$(NC)"; \
	else \
		echo "$(RED)‚ùå –ê–¥–∞–ø—Ç–µ—Ä—ã –Ω–∞ /dev/ttyACM* –Ω–µ –Ω–∞–π–¥–µ–Ω—ã$(NC)"; \
	fi
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ /dev/ttyUSB*:$(NC)"
	@if ls /dev/ttyUSB* 2>/dev/null; then \
		echo "$(GREEN)‚úÖ –ù–∞–π–¥–µ–Ω—ã –∞–¥–∞–ø—Ç–µ—Ä—ã –Ω–∞ /dev/ttyUSB*$(NC)"; \
	else \
		echo "$(RED)‚ùå –ê–¥–∞–ø—Ç–µ—Ä—ã –Ω–∞ /dev/ttyUSB* –Ω–µ –Ω–∞–π–¥–µ–Ω—ã$(NC)"; \
	fi
	@echo ""
	@echo "$(BLUE)üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞:$(NC)"
	@for port in /dev/ttyACM* /dev/ttyUSB*; do \
		if [ -e "$$port" ]; then \
			echo "$(YELLOW)$$port:$(NC) $$(ls -la $$port | awk '{print $$1, $$3, $$4}')"; \
		fi; \
	done

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—Ç–∞ Zigbee –∞–¥–∞–ø—Ç–µ—Ä–∞
configure: ## –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ—Ä—Ç Zigbee –∞–¥–∞–ø—Ç–µ—Ä–∞
	@echo "$(BLUE)‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Zigbee –∞–¥–∞–ø—Ç–µ—Ä–∞...$(NC)"
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'make setup' —Å–Ω–∞—á–∞–ª–∞.$(NC)"; \
		exit 1; \
	fi
	@echo "$(YELLOW)–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã:$(NC)"
	@make detect
	@echo ""
	@echo "$(YELLOW)–¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ .env:$(NC)"
	@if grep -q "ZIGBEE_ADAPTER_PORT" $(ENV_FILE); then \
		grep "ZIGBEE_ADAPTER_PORT" $(ENV_FILE); \
	else \
		echo "$(RED)ZIGBEE_ADAPTER_PORT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω$(NC)"; \
	fi
	@echo ""
	@echo "$(BLUE)–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—Ç–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env$(NC)"
	@echo "$(YELLOW)–ü—Ä–∏–º–µ—Ä: ZIGBEE_ADAPTER_PORT=/dev/ttyACM0$(NC)"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–∞–ø—Ç–µ—Ä—É
permissions: ## –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Zigbee –∞–¥–∞–ø—Ç–µ—Ä—É
	@echo "$(BLUE)üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ Zigbee –∞–¥–∞–ø—Ç–µ—Ä—É...$(NC)"
	@echo "$(YELLOW)–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É dialout...$(NC)"
	@if ! groups $$USER | grep -q dialout; then \
		echo "$(YELLOW)–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $$USER –≤ –≥—Ä—É–ø–ø—É dialout...$(NC)"; \
		sudo usermod -a -G dialout $$USER; \
		echo "$(GREEN)‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $$USER –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É dialout$(NC)"; \
		echo "$(YELLOW)‚ö†Ô∏è  –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ 'newgrp dialout' –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π$(NC)"; \
	else \
		echo "$(GREEN)‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $$USER —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ dialout$(NC)"; \
	fi
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Ä—Ç–∞–º...$(NC)"
	@for port in /dev/ttyACM* /dev/ttyUSB*; do \
		if [ -e "$$port" ]; then \
			echo "$(BLUE)–ü–æ—Ä—Ç $$port:$(NC) $$(ls -la $$port | awk '{print $$1, $$3, $$4}')"; \
			if [ -r "$$port" ] && [ -w "$$port" ]; then \
				echo "$(GREEN)‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ $$port –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã$(NC)"; \
			else \
				echo "$(RED)‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ $$port$(NC)"; \
				echo "$(YELLOW)üí° –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ 'newgrp dialout'$(NC)"; \
			fi; \
		fi; \
	done

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
apply-group: ## –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É dialout –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
	@echo "$(BLUE)üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã dialout...$(NC)"
	@if groups $$USER | grep -q dialout; then \
		echo "$(YELLOW)–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã dialout –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏...$(NC)"; \
		newgrp dialout; \
		echo "$(GREEN)‚úÖ –ì—Ä—É–ø–ø–∞ dialout –ø—Ä–∏–º–µ–Ω–µ–Ω–∞$(NC)"; \
	else \
		echo "$(RED)‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $$USER –Ω–µ –≤ –≥—Ä—É–ø–ø–µ dialout$(NC)"; \
		echo "$(YELLOW)üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make permissions$(NC)"; \
	fi

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
generate-config: ## –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Zigbee —Å–µ—Ç–∏
	@echo "$(BLUE)üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Zigbee —Å–µ—Ç–∏...$(NC)"
	@if [ ! -f zigbee2mqtt/data/configuration.yaml ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
		echo "$(YELLOW)üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make setup$(NC)"; \
		exit 1; \
	fi
	@cd scripts && ./generate-config.sh

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
generate-configs: ## –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ —Å envsubst
	@echo "$(BLUE)üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤...$(NC)"
	@if [ ! -f /usr/bin/envsubst ]; then \
		echo "$(RED)‚ùå envsubst –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ gettext-base:$(NC)"; \
		echo "$(YELLOW)   sudo apt-get install gettext-base$(NC)"; \
		exit 1; \
	fi
	@cd scripts && ./generate-configs.sh

# –ü–æ–ª–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
secure-setup: setup generate-configs ## –ü–æ–ª–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏
	@echo "$(GREEN)‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏!$(NC)"
	@echo "$(BLUE)üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:$(NC)"
	@echo "   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: make permissions"
	@echo "   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: make start"
	@echo "   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: make status"

# –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
start: setup ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ Zigbee2MQTT —Å MQTT Broker...$(NC)"
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...$(NC)"
	@if ! groups $$USER | grep -q dialout; then \
		echo "$(YELLOW)‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $$USER –Ω–µ –≤ –≥—Ä—É–ø–ø–µ dialout$(NC)"; \
		echo "$(YELLOW)üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make permissions$(NC)"; \
		echo "$(YELLOW)   –ó–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make apply-group$(NC)"; \
	else \
		echo "$(GREEN)‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $$USER –≤ –≥—Ä—É–ø–ø–µ dialout$(NC)"; \
	fi
	@echo "$(YELLOW)–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: $(DOCKER_COMPOSE_CMD)$(NC)"
	@$(DOCKER_COMPOSE_CMD) up -d
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!$(NC)"
	@echo "$(BLUE)üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:$(NC)"
	@echo "   ‚Ä¢ MQTT Broker: mqtt://localhost:$${MQTT_PORT:-1883}"
	@echo "   ‚Ä¢ MQTT WebSocket: ws://localhost:$${MQTT_WS_PORT:-9001}"
	@echo "   ‚Ä¢ Zigbee2MQTT Web UI: http://localhost:$${ZIGBEE2MQTT_PORT:-8081}"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(BLUE)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Zigbee2MQTT —Å MQTT Broker...$(NC)"
	@$(DOCKER_COMPOSE_CMD) down
	@echo "$(GREEN)‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!$(NC)"

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
restart: stop start ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã

# –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å Zigbee2MQTT —Å MQTT Broker...$(NC)"
	@echo ""
	@echo "$(YELLOW)üê≥ –°—Ç–∞—Ç—É—Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:$(NC)"
	@$(DOCKER_COMPOSE_CMD) ps
	@echo ""
	@echo "$(BLUE)üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–∞—Ö:$(NC)"
	@echo "   ‚Ä¢ MQTT Broker: mqtt://localhost:$${MQTT_PORT:-1883}"
	@echo "   ‚Ä¢ MQTT WebSocket: ws://localhost:$${MQTT_WS_PORT:-9001}"
	@echo "   ‚Ä¢ Zigbee2MQTT Web UI: http://localhost:$${ZIGBEE2MQTT_PORT:-8081}"

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BLUE)üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	@$(DOCKER_COMPOSE_CMD) logs -f

# –õ–æ–≥–∏ MQTT
logs-mqtt: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ MQTT —Å–µ—Ä–≤–µ—Ä–∞
	@echo "$(BLUE)üìã –õ–æ–≥–∏ MQTT —Å–µ—Ä–≤–µ—Ä–∞:$(NC)"
	@$(DOCKER_COMPOSE_CMD) logs -f mqtt

# –õ–æ–≥–∏ Zigbee2MQTT
logs-zigbee: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Zigbee2MQTT
	@echo "$(BLUE)üìã –õ–æ–≥–∏ Zigbee2MQTT:$(NC)"
	@$(DOCKER_COMPOSE_CMD) logs -f zigbee2mqtt

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤
pull: ## –û–±–Ω–æ–≤–∏—Ç—å Docker –æ–±—Ä–∞–∑—ã
	@echo "$(BLUE)üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤...$(NC)"
	@$(DOCKER_COMPOSE_CMD) pull
	@echo "$(GREEN)‚úÖ –û–±—Ä–∞–∑—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!$(NC)"

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
restart-mqtt: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å MQTT —Å–µ—Ä–≤–µ—Ä
	@echo "$(BLUE)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ MQTT —Å–µ—Ä–≤–µ—Ä–∞...$(NC)"
	@$(DOCKER_COMPOSE_CMD) restart mqtt
	@echo "$(GREEN)‚úÖ MQTT —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!$(NC)"

restart-zigbee: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Zigbee2MQTT
	@echo "$(BLUE)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Zigbee2MQTT...$(NC)"
	@$(DOCKER_COMPOSE_CMD) restart zigbee2mqtt
	@echo "$(GREEN)‚úÖ Zigbee2MQTT –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!$(NC)"

# –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
clean: ## –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–û–°–¢–û–†–û–ñ–ù–û!)
	@echo "$(RED)‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ!$(NC)"
	@echo "$(YELLOW)–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N):$(NC)"
	@read -p "" confirm && [ "$$confirm" = "y" ] || exit 1
	@echo "$(BLUE)üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	@$(DOCKER_COMPOSE_CMD) down -v
	@sudo rm -rf mqtt/data/* zigbee2mqtt/data/*
	@echo "$(GREEN)‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!$(NC)"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config-check: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...$(NC)"
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml:$(NC)"
	@$(DOCKER_COMPOSE_CMD) config
	@echo ""
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:$(NC)"
	@if [ -f $(ENV_FILE) ]; then \
		echo "$(GREEN)‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω$(NC)"; \
		echo "$(BLUE)–°–æ–¥–µ—Ä–∂–∏–º–æ–µ .env:$(NC)"; \
		cat $(ENV_FILE); \
	else \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
	fi

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
test-mqtt: ## –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT
	@echo "$(BLUE)üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...$(NC)"
	@if command -v mosquitto_pub >/dev/null 2>&1; then \
		echo "$(YELLOW)–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...$(NC)"; \
		mosquitto_pub -h localhost -p $${MQTT_PORT:-1883} -t "test/connection" -m "Hello from Makefile" || echo "$(RED)‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT$(NC)"; \
		echo "$(GREEN)‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  mosquitto-clients –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.$(NC)"; \
	fi

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
info: ## –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
	@echo "$(BLUE)‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:$(NC)"
	@echo "$(YELLOW)Docker –≤–µ—Ä—Å–∏—è:$(NC)"
	@docker --version
	@echo "$(YELLOW)Docker Compose –∫–æ–º–∞–Ω–¥–∞:$(NC) $(DOCKER_COMPOSE_CMD)"
	@echo "$(YELLOW)–ü—Ä–æ–µ–∫—Ç:$(NC) $(PROJECT_NAME)"
	@echo "$(YELLOW)–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:$(NC) $(PWD)"
	@echo "$(YELLOW)–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:$(NC)"
	@if [ -f $(ENV_FILE) ]; then \
		echo "$(GREEN)‚úÖ –§–∞–π–ª .env –∑–∞–≥—Ä—É–∂–µ–Ω$(NC)"; \
	else \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
	fi
	@echo "$(YELLOW)–í–µ—Ä—Å–∏–∏ –æ–±—Ä–∞–∑–æ–≤:$(NC)"
	@echo "   ‚Ä¢ MQTT Broker: eclipse-mosquitto:2.0.18"
	@echo "   ‚Ä¢ Zigbee2MQTT: koenkk/zigbee2mqtt:1.42.0 (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–æ 2.0)" 