MAKEFLAGS += --no-print-directory
# Makefile –¥–ª—è Zigbee2MQTT —Å MQTT Broker
# –ê–≤—Ç–æ—Ä: Zigbee Manager

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
DOCKER_COMPOSE_CMD := $(shell if command -v docker >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then echo "docker compose"; elif command -v docker-compose >/dev/null 2>&1; then echo "docker-compose"; else echo "docker-compose"; fi)
PROJECT_NAME := zigbee-manager
ENV_FILE := .env

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
BLUE := \033[0;34m
NC := \033[0m # No Color

.PHONY: help start stop restart status logs logs-mqtt logs-zigbee clean detect configure setup env permissions apply-group generate-configs secure-setup generate-security pull restart-mqtt restart-zigbee config-check test-mqtt backup restore backup-system restore-system permit-join-enable permit-join-disable permit-join-temp permit-join-status monitor-devices monitor-devices-all monitor-devices-filter info cloud-mqtt-setup cloud-mqtt-enable cloud-mqtt-disable cloud-mqtt-status cloud-mqtt-test cloud-mqtt-credentials mqtt-subscribe mqtt-publish

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
	@echo "$(BLUE)Zigbee2MQTT —Å MQTT Broker - –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è$(NC)"
	@echo ""
	@echo "$(GREEN)–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(YELLOW)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(GREEN)–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞ Docker Compose:$(NC) $(DOCKER_COMPOSE_CMD)"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
setup: ## –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
	@echo "$(BLUE)üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Zigbee2MQTT —Å MQTT Broker...$(NC)"
	@# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!$(NC)"; \
		echo "$(YELLOW)üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make env$(NC)"; \
		echo "$(BLUE)üìù –≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç .env –∏–∑ env.example –∏ –æ—Ç–∫—Ä–æ–µ—Ç –µ–≥–æ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ$(NC)"; \
		echo "$(BLUE)üìù –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ .env –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make setup$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω$(NC)"
	@# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
	@echo "$(BLUE)üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...$(NC)"
	@echo "$(YELLOW)1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...$(NC)"
	@$(MAKE) permissions
	@echo "$(YELLOW)2Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã dialout...$(NC)"
	@$(MAKE) apply-group
	@echo "$(YELLOW)3Ô∏è‚É£ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ Zigbee –∞–¥–∞–ø—Ç–µ—Ä–æ–≤...$(NC)"
	@$(MAKE) detect
	@echo "$(YELLOW)4Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...$(NC)"
	@AUTO=true $(MAKE) generate-configs
	@echo "$(GREEN)‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!$(NC)"
	@echo "$(BLUE)üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:$(NC)"
	@echo "   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: make start"
	@echo "   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: make status"

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–º .env
env: ## –°–æ–∑–¥–∞—Ç—å .env –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
	@echo "$(BLUE)üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–º .env...$(NC)"
	@if [ -f $(ENV_FILE) ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!$(NC)"; \
		echo -n "$(YELLOW)–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∏–∑ env.example? [y/N] $(NC)"; \
		read -r ans; \
		if [ "$$ans" = "y" ] || [ "$$ans" = "Y" ]; then \
			echo "$(BLUE)üìù –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ env.example –≤ .env...$(NC)"; \
			cp env.example $(ENV_FILE); \
			echo "$(GREEN)‚úÖ –§–∞–π–ª .env –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –∏–∑ env.example$(NC)"; \
		else \
			echo "$(BLUE)‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª .env$(NC)"; \
		fi; \
	else \
		echo "$(BLUE)üìù –°–æ–∑–¥–∞–Ω–∏–µ .env –∏–∑ env.example...$(NC)"; \
		cp env.example $(ENV_FILE); \
		echo "$(GREEN)‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏–∑ env.example$(NC)"; \
	fi
	@echo "$(BLUE)üìù –§–∞–π–ª .env –≥–æ—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: $(ENV_FILE)$(NC)"
	@echo "$(YELLOW)üí° –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: make cloud-mqtt-credentials$(NC)"

# –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ Zigbee –∞–¥–∞–ø—Ç–µ—Ä–∞
detect: ## –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ Zigbee –∞–¥–∞–ø—Ç–µ—Ä—ã
	@echo "$(BLUE)üîç –ü–æ–∏—Å–∫ Zigbee –∞–¥–∞–ø—Ç–µ—Ä–æ–≤...$(NC)"
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤...$(NC)"
	@echo "$(BLUE)üìã –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö:$(NC)"
	@echo ""
	@found_zigbee=false; \
	for port in /dev/ttyACM* /dev/ttyUSB*; do \
		if [ -e "$$port" ]; then \
			echo "$(YELLOW)üîç –ê–Ω–∞–ª–∏–∑ $$port:$(NC)"; \
			device_info=$$(udevadm info --name=$$port --query=property 2>/dev/null); \
			if [ -n "$$device_info" ]; then \
				vendor_id=$$(echo "$$device_info" | grep -i "ID_VENDOR_ID" | cut -d= -f2); \
				product_id=$$(echo "$$device_info" | grep -i "ID_MODEL_ID" | cut -d= -f2); \
				vendor_name=$$(echo "$$device_info" | grep -i "ID_VENDOR" | cut -d= -f2 | head -1); \
				product_name=$$(echo "$$device_info" | grep -i "ID_MODEL" | cut -d= -f2 | head -1); \
				serial=$$(echo "$$device_info" | grep -i "ID_SERIAL" | cut -d= -f2 | head -1); \
				echo "   üìç –ü–æ—Ä—Ç: $$port"; \
				echo "   üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: $$vendor_name"; \
				echo "   üì¶ –ú–æ–¥–µ–ª—å: $$product_name"; \
				echo "   üÜî Vendor ID: $$vendor_id"; \
				echo "   üÜî Product ID: $$product_id"; \
				echo "   üî¢ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: $$serial"; \
				echo "   üîê –ü—Ä–∞–≤–∞: $$(ls -la $$port | awk '{print $$1, $$3, $$4}')"; \
				\
				# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ Zigbee –∞–¥–∞–ø—Ç–µ—Ä—ã \
				is_zigbee=false; \
				case "$$vendor_id:$$product_id" in \
					"0451:bef3"|"0451:bef4"|"0451:bef5") \
						echo "   ‚úÖ $(GREEN)–û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ Texas Instruments CC2531 Zigbee –∞–¥–∞–ø—Ç–µ—Ä$(NC)"; \
						is_zigbee=true; \
						found_zigbee=true; \
						;; \
					"0451:16c8"|"0451:16c9") \
						echo "   ‚úÖ $(GREEN)–û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ Texas Instruments CC2538 Zigbee –∞–¥–∞–ø—Ç–µ—Ä$(NC)"; \
						is_zigbee=true; \
						found_zigbee=true; \
						;; \
					"10c4:ea60"|"10c4:ea61"|"10c4:ea70") \
						echo "   ‚ùì $(YELLOW)Silicon Labs CP210x - USB-to-Serial —á–∏–ø$(NC)"; \
						echo "   ‚ÑπÔ∏è  $(BLUE)–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ Zigbee –∞–¥–∞–ø—Ç–µ—Ä–∞—Ö, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Zigbee —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º$(NC)"; \
						is_zigbee=false; \
						;; \
					"0403:6001"|"0403:6015") \
						echo "   ‚ùì $(YELLOW)FTDI FT232/FT245 - USB-to-Serial —á–∏–ø$(NC)"; \
						echo "   ‚ÑπÔ∏è  $(BLUE)–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ Zigbee –∞–¥–∞–ø—Ç–µ—Ä–∞—Ö, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Zigbee —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º$(NC)"; \
						is_zigbee=false; \
						;; \
					"1a86:7523"|"1a86:5523") \
						echo "   ‚ùì $(YELLOW)QinHeng Electronics CH340/CH341 - USB-to-Serial —á–∏–ø$(NC)"; \
						echo "   ‚ÑπÔ∏è  $(BLUE)–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ Zigbee –∞–¥–∞–ø—Ç–µ—Ä–∞—Ö, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Zigbee —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º$(NC)"; \
						is_zigbee=false; \
						;; \
					"067b:2303"|"067b:2302") \
						echo "   ‚ùì $(YELLOW)Prolific Technology PL2303 - USB-to-Serial —á–∏–ø$(NC)"; \
						echo "   ‚ÑπÔ∏è  $(BLUE)–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ Zigbee –∞–¥–∞–ø—Ç–µ—Ä–∞—Ö, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Zigbee —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º$(NC)"; \
						is_zigbee=false; \
						;; \
					*) \
						if echo "$$product_name" | grep -qi "zigbee\|cc2531\|cc2538\|cc2652\|cc1352\|sniffer\|coordinator"; then \
							echo "   ‚úÖ $(GREEN)–û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ Zigbee –∞–¥–∞–ø—Ç–µ—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é$(NC)"; \
							is_zigbee=true; \
							found_zigbee=true; \
						else \
							echo "   ‚ùì $(YELLOW)–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ Zigbee –∞–¥–∞–ø—Ç–µ—Ä$(NC)"; \
						fi; \
						;; \
				esac; \
				\
				if [ "$$is_zigbee" = "true" ]; then \
					echo "   üí° $(BLUE)–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å Zigbee2MQTT$(NC)"; \
					# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞ \
					case "$$vendor_id:$$product_id" in \
						"0451:16c8"|"0451:16c9") \
							echo "   ‚≠ê $(GREEN)CC2538 - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Zigbee –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä$(NC)"; \
							;; \
						"0451:bef3"|"0451:bef4"|"0451:bef5") \
							echo "   ‚≠ê $(GREEN)CC2531 - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Zigbee –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä$(NC)"; \
							;; \
						*) \
							echo "   ‚ÑπÔ∏è  $(BLUE)–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Zigbee –∞–¥–∞–ø—Ç–µ—Ä$(NC)"; \
							;; \
					esac; \
				else \
					echo "   ‚ö†Ô∏è  $(YELLOW)–í–æ–∑–º–æ–∂–Ω–æ –æ–±—ã—á–Ω—ã–π USB-to-Serial –∞–¥–∞–ø—Ç–µ—Ä$(NC)"; \
				fi; \
				echo ""; \
			else \
				echo "   ‚ùå $(RED)–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ$(NC)"; \
				echo "   üîê –ü—Ä–∞–≤–∞: $$(ls -la $$port | awk '{print $$1, $$3, $$4}')"; \
				echo ""; \
			fi; \
		fi; \
	done; \
	\
	if [ "$$found_zigbee" = "false" ]; then \
		echo "$(RED)‚ùå Zigbee –∞–¥–∞–ø—Ç–µ—Ä—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã$(NC)"; \
		echo "$(YELLOW)üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Zigbee –∞–¥–∞–ø—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π$(NC)"; \
		echo "$(BLUE)üí° –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã USB-to-Serial —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –Ω–æ –æ–Ω–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è Zigbee –∞–¥–∞–ø—Ç–µ—Ä–∞–º–∏$(NC)"; \
	else \
		echo "$(GREEN)‚úÖ Zigbee –∞–¥–∞–ø—Ç–µ—Ä—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!$(NC)"; \
	fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—Ç–∞ Zigbee –∞–¥–∞–ø—Ç–µ—Ä–∞
configure: ## –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ—Ä—Ç Zigbee –∞–¥–∞–ø—Ç–µ—Ä–∞
	@echo "$(BLUE)‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Zigbee –∞–¥–∞–ø—Ç–µ—Ä–∞...$(NC)"
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'make setup' —Å–Ω–∞—á–∞–ª–∞.$(NC)"; \
		exit 1; \
	fi
	@echo "$(YELLOW)–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã:$(NC)"
	@make detect
	@echo ""
	@echo "$(YELLOW)–¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ .env:$(NC)"
	@if grep -q "ZIGBEE_ADAPTER_PORT" $(ENV_FILE); then \
		grep "ZIGBEE_ADAPTER_PORT" $(ENV_FILE); \
	else \
		echo "$(RED)ZIGBEE_ADAPTER_PORT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω$(NC)"; \
	fi
	@echo ""
	@echo "$(BLUE)–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—Ç–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env$(NC)"
	@echo "$(YELLOW)–ü—Ä–∏–º–µ—Ä: ZIGBEE_ADAPTER_PORT=/dev/ttyACM0$(NC)"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–∞–ø—Ç–µ—Ä—É
permissions: ## –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Zigbee –∞–¥–∞–ø—Ç–µ—Ä—É
	@echo "$(BLUE)üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ Zigbee –∞–¥–∞–ø—Ç–µ—Ä—É...$(NC)"
	@echo "$(YELLOW)–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É dialout...$(NC)"
	@if ! groups $$USER | grep -q dialout; then \
		echo "$(YELLOW)–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $$USER –≤ –≥—Ä—É–ø–ø—É dialout...$(NC)"; \
		sudo usermod -a -G dialout $$USER; \
		echo "$(GREEN)‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $$USER –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É dialout$(NC)"; \
		echo "$(YELLOW)‚ö†Ô∏è  –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ 'newgrp dialout' –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π$(NC)"; \
	else \
		echo "$(GREEN)‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $$USER —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ dialout$(NC)"; \
	fi
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Ä—Ç–∞–º...$(NC)"
	@for port in /dev/ttyACM* /dev/ttyUSB*; do \
		if [ -e "$$port" ]; then \
			echo "$(BLUE)–ü–æ—Ä—Ç $$port:$(NC) $$(ls -la $$port | awk '{print $$1, $$3, $$4}')"; \
			if [ -r "$$port" ] && [ -w "$$port" ]; then \
				echo "$(GREEN)‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ $$port –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã$(NC)"; \
			else \
				echo "$(RED)‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ $$port$(NC)"; \
				echo "$(YELLOW)üí° –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ 'newgrp dialout'$(NC)"; \
			fi; \
		fi; \
	done

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
apply-group: ## –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É dialout –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
	@echo "$(BLUE)üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã dialout...$(NC)"
	@if groups $$USER | grep -q dialout; then \
		echo "$(YELLOW)–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã dialout –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏...$(NC)"; \
		newgrp dialout; \
		echo "$(GREEN)‚úÖ –ì—Ä—É–ø–ø–∞ dialout –ø—Ä–∏–º–µ–Ω–µ–Ω–∞$(NC)"; \
	else \
		echo "$(RED)‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $$USER –Ω–µ –≤ –≥—Ä—É–ø–ø–µ dialout$(NC)"; \
		echo "$(YELLOW)üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make permissions$(NC)"; \
	fi

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
generate-configs: ## –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ —Å envsubst
	@echo "$(BLUE)üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤...$(NC)"
	@if [ -f zigbee2mqtt/data/configuration.yaml ] && [ -z "$$FORCE" ] && [ -z "$$AUTO" ]; then \
		echo "$(RED)‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Zigbee2MQTT —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω!$(NC)"; \
		echo -n "$(YELLOW)–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é? [y/N] $(NC)"; \
		read -r ans; \
		if [ "$$ans" != "y" ] && [ "$$ans" != "Y" ]; then \
			echo "$(YELLOW)–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.$(NC)"; \
			false; \
		fi; \
	fi
	@if [ ! -f /usr/bin/envsubst ]; then \
		echo "$(RED)‚ùå envsubst –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ gettext-base:$(NC)"; \
		echo "$(YELLOW)   sudo apt-get install gettext-base$(NC)"; \
		exit 1; \
	fi
	@cd scripts && ./generate-configs.sh

# –ü–æ–ª–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
secure-setup: setup generate-security ## –ü–æ–ª–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π PAN ID, Extended PAN ID –∏ Network Key
	@echo "$(GREEN)‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏!$(NC)"
	@echo "$(BLUE)üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:$(NC)"
	@echo "   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: make start"
	@echo "   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: make status"

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
generate-security: ## –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–û–°–¢–û–†–û–ñ–ù–û!)
	@if [ -z "$$FORCE" ]; then \
		echo "$(RED)‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ù–û–í–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏!$(NC)"; \
		echo "$(YELLOW)üí° –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã.$(NC)"; \
		echo "$(YELLOW)üí° –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—Ç–µ—Ä—è—é—Ç —Å–≤—è–∑—å —Å —Å–µ—Ç—å—é!$(NC)"; \
		echo -n "$(YELLOW)–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã? [y/N] $(NC)"; \
		read -r ans; \
		if [ "$$ans" != "y" ] && [ "$$ans" != "Y" ]; then \
			echo "$(YELLOW)–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.$(NC)"; \
			false; \
		fi; \
	fi
	@echo "$(BLUE)üîê –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...$(NC)"
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make setup${NC}"; \
		exit 1; \
	fi
	@# –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
	@sed -i '/^ZIGBEE_PAN_ID=/d' $(ENV_FILE) 2>/dev/null || true
	@sed -i '/^ZIGBEE_EXTENDED_PAN_ID=/d' $(ENV_FILE) 2>/dev/null || true
	@sed -i '/^ZIGBEE_NETWORK_KEY=/d' $(ENV_FILE) 2>/dev/null || true
	@cd scripts && ./generate-configs.sh
	@echo "$(GREEN)‚úÖ –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫ —Å–µ—Ç–∏!${NC}"

# –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
start: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ Zigbee2MQTT —Å MQTT Broker...$(NC)"
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...$(NC)"
	@if ! groups $$USER | grep -q dialout; then \
		echo "$(YELLOW)‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $$USER –Ω–µ –≤ –≥—Ä—É–ø–ø–µ dialout$(NC)"; \
		echo "$(YELLOW)üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make permissions$(NC)"; \
		echo "$(YELLOW)   –ó–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make apply-group$(NC)"; \
	else \
		echo "$(GREEN)‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $$USER –≤ –≥—Ä—É–ø–ø–µ dialout$(NC)"; \
	fi
	@echo "$(YELLOW)–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: $(DOCKER_COMPOSE_CMD)$(NC)"
	@$(DOCKER_COMPOSE_CMD) up -d
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!$(NC)"
	@echo "$(BLUE)üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:$(NC)"
	@echo "   ‚Ä¢ MQTT Broker: mqtt://localhost:$${MQTT_PORT:-1883}"
	@echo "   ‚Ä¢ MQTT WebSocket: ws://localhost:$${MQTT_WS_PORT:-9001}"
	@echo "   ‚Ä¢ Zigbee2MQTT Web UI: http://localhost:$${ZIGBEE2MQTT_PORT:-8083}"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(BLUE)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Zigbee2MQTT —Å MQTT Broker...$(NC)"
	@$(DOCKER_COMPOSE_CMD) down
	@echo "$(GREEN)‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!$(NC)"

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(BLUE)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Zigbee2MQTT —Å MQTT Broker...$(NC)"
	@$(DOCKER_COMPOSE_CMD) down
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...$(NC)"
	@if ! groups $$USER | grep -q dialout; then \
		echo "$(YELLOW)‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $$USER –Ω–µ –≤ –≥—Ä—É–ø–ø–µ dialout$(NC)"; \
		echo "$(YELLOW)üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make permissions$(NC)"; \
		echo "$(YELLOW)   –ó–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make apply-group$(NC)"; \
	else \
		echo "$(GREEN)‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $$USER –≤ –≥—Ä—É–ø–ø–µ dialout$(NC)"; \
	fi
	@echo "$(YELLOW)–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: $(DOCKER_COMPOSE_CMD)$(NC)"
	@$(DOCKER_COMPOSE_CMD) up -d
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!$(NC)"
	@echo "$(BLUE)üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:$(NC)"
	@echo "   ‚Ä¢ MQTT Broker: mqtt://localhost:$${MQTT_PORT:-1883}"
	@echo "   ‚Ä¢ MQTT WebSocket: ws://localhost:$${MQTT_WS_PORT:-9001}"
	@echo "   ‚Ä¢ Zigbee2MQTT Web UI: http://localhost:$${ZIGBEE2MQTT_PORT:-8083}"

# –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å Zigbee2MQTT —Å MQTT Broker...$(NC)"
	@echo ""
	@echo "$(YELLOW)üê≥ –°—Ç–∞—Ç—É—Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:$(NC)"
	@$(DOCKER_COMPOSE_CMD) ps
	@echo ""
	@echo "$(BLUE)üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–∞—Ö:$(NC)"
	@echo "   ‚Ä¢ MQTT Broker: mqtt://localhost:$${MQTT_PORT:-1883}"
	@echo "   ‚Ä¢ MQTT WebSocket: ws://localhost:$${MQTT_WS_PORT:-9001}"
	@echo "   ‚Ä¢ Zigbee2MQTT Web UI: http://localhost:$${ZIGBEE2MQTT_PORT:-8083}"

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BLUE)üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	@$(DOCKER_COMPOSE_CMD) logs -f

# –õ–æ–≥–∏ MQTT
logs-mqtt: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ MQTT —Å–µ—Ä–≤–µ—Ä–∞
	@echo "$(BLUE)üìã –õ–æ–≥–∏ MQTT —Å–µ—Ä–≤–µ—Ä–∞:$(NC)"
	@$(DOCKER_COMPOSE_CMD) logs -f mqtt

# –õ–æ–≥–∏ Zigbee2MQTT
logs-zigbee: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Zigbee2MQTT
	@echo "$(BLUE)üìã –õ–æ–≥–∏ Zigbee2MQTT:$(NC)"
	@$(DOCKER_COMPOSE_CMD) logs -f zigbee2mqtt

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤
pull: ## –û–±–Ω–æ–≤–∏—Ç—å Docker –æ–±—Ä–∞–∑—ã
	@echo "$(BLUE)üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤...$(NC)"
	@$(DOCKER_COMPOSE_CMD) pull
	@echo "$(GREEN)‚úÖ –û–±—Ä–∞–∑—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!$(NC)"

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
restart-mqtt: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å MQTT —Å–µ—Ä–≤–µ—Ä
	@echo "$(BLUE)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ MQTT —Å–µ—Ä–≤–µ—Ä–∞...$(NC)"
	@$(DOCKER_COMPOSE_CMD) restart mqtt
	@echo "$(GREEN)‚úÖ MQTT —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!$(NC)"

restart-zigbee: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Zigbee2MQTT
	@echo "$(BLUE)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Zigbee2MQTT...$(NC)"
	@$(DOCKER_COMPOSE_CMD) restart zigbee2mqtt
	@echo "$(GREEN)‚úÖ Zigbee2MQTT –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!$(NC)"

# –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
clean: ## –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–û–°–¢–û–†–û–ñ–ù–û!)
	@if [ -z "$$FORCE" ]; then \
		echo "$(RED)‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã!$(NC)"; \
		echo "$(YELLOW)üí° –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –¥–∞–Ω–Ω—ã–µ MQTT –∏ Zigbee2MQTT –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.$(NC)"; \
		echo -n "$(YELLOW)–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? [y/N] $(NC)"; \
		read -r ans; \
		if [ "$$ans" != "y" ] && [ "$$ans" != "Y" ]; then \
			echo "$(YELLOW)–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.$(NC)"; \
			false; \
		fi; \
	fi
	@echo "$(BLUE)üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	@$(DOCKER_COMPOSE_CMD) down -v
	@sudo rm -rf mqtt/data/* zigbee2mqtt/data/*
	@echo "$(GREEN)‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!$(NC)"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config-check: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...$(NC)"
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml:$(NC)"
	@$(DOCKER_COMPOSE_CMD) config
	@echo ""
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:$(NC)"
	@if [ -f $(ENV_FILE) ]; then \
		echo "$(GREEN)‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω$(NC)"; \
		echo "$(BLUE)–°–æ–¥–µ—Ä–∂–∏–º–æ–µ .env:$(NC)"; \
		cat $(ENV_FILE); \
	else \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
	fi

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
test-mqtt: ## –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT
	@echo "$(BLUE)üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...$(NC)"
	@if command -v mosquitto_pub >/dev/null 2>&1; then \
		echo "$(YELLOW)–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...$(NC)"; \
		mosquitto_pub -h localhost -p $${MQTT_PORT:-1883} -t "test/connection" -m "Hello from Makefile" || echo "$(RED)‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT$(NC)"; \
		echo "$(GREEN)‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  mosquitto-clients –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.$(NC)"; \
	fi

# –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
backup: ## –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	@echo "$(BLUE)üîê –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...$(NC)"
	@cd scripts && ./backup-security.sh

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
restore: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
	@echo "$(BLUE)üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...$(NC)"
	@if [ -z "$(BACKUP_PATH)" ]; then \
		echo "$(RED)‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏$(NC)"; \
		echo "$(YELLOW)üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make restore BACKUP_PATH=backups/20250726_143022$(NC)"; \
		exit 1; \
	fi
	@if [ -z "$$FORCE" ]; then \
		echo "$(RED)‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!$(NC)"; \
		echo "$(YELLOW)üí° –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.$(NC)"; \
		echo -n "$(YELLOW)–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã? [y/N] $(NC)"; \
		read -r ans; \
		if [ "$$ans" != "y" ] && [ "$$ans" != "Y" ]; then \
			echo "$(YELLOW)–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.$(NC)"; \
			false; \
		fi; \
	fi
	@cd scripts && ./restore-security.sh ../$(BACKUP_PATH)

# –ü–æ–ª–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
backup-system: ## –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
	@echo "$(BLUE)üîê –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å–∏—Å—Ç–µ–º—ã...$(NC)"
	@if [ -z "$(NAME)" ]; then \
		echo "$(YELLOW)üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make backup-system NAME=–∏–º—è_—Ä–µ–∑–µ—Ä–≤–Ω–æ–π_–∫–æ–ø–∏–∏$(NC)"; \
		echo "$(YELLOW)üí° –ü—Ä–∏–º–µ—Ä: make backup-system NAME=before-update$(NC)"; \
		echo "$(BLUE)üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏–º–µ–Ω–µ–º...$(NC)"; \
	fi
	@cd scripts && ./backup-system.sh "$(NAME)"

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
restore-system: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É –∏–∑ –ø–æ–ª–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
	@echo "$(BLUE)üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–∑ –ø–æ–ª–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...$(NC)"
	@if [ -z "$(BACKUP_FILE)" ]; then \
		echo "$(RED)‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏$(NC)"; \
		echo "$(YELLOW)üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make restore-system BACKUP_FILE=backups/zigbee-manager-backup-20250726_143022.tar.gz$(NC)"; \
		exit 1; \
	fi
	@if [ -z "$$FORCE" ]; then \
		echo "$(RED)‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã!$(NC)"; \
		echo "$(YELLOW)üí° –¢–µ–∫—É—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.$(NC)"; \
		echo -n "$(YELLOW)–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É? [y/N] $(NC)"; \
		read -r ans; \
		if [ "$$ans" != "y" ] && [ "$$ans" != "Y" ]; then \
			echo "$(YELLOW)–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.$(NC)"; \
			false; \
		fi; \
	fi
	@cd scripts && ./restore-system.sh ../$(BACKUP_FILE)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ permit_join
permit-join-enable: ## –í–∫–ª—é—á–∏—Ç—å permit_join –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	@echo "$(BLUE)üîì –í–∫–ª—é—á–µ–Ω–∏–µ permit_join...$(NC)"
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!$(NC)"; \
		echo "$(YELLOW)üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make env$(NC)"; \
		exit 1; \
	fi
	@echo "$(YELLOW)üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π PERMIT_JOIN –≤ .env...$(NC)"
	@if grep -q "^PERMIT_JOIN=" $(ENV_FILE); then \
		sed -i 's/^PERMIT_JOIN=.*/PERMIT_JOIN=true/' $(ENV_FILE); \
	else \
		echo "PERMIT_JOIN=true" >> $(ENV_FILE); \
	fi
	@echo "$(GREEN)‚úÖ PERMIT_JOIN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ true$(NC)"
	@echo "$(YELLOW)üìù –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...$(NC)"
	@AUTO=true $(MAKE) generate-configs
	@echo "$(YELLOW)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Zigbee2MQTT...$(NC)"
	@$(MAKE) restart-zigbee
	@echo "$(GREEN)‚úÖ Permit join –≤–∫–ª—é—á–µ–Ω –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–µ$(NC)"
	@echo "$(YELLOW)üí° –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ —Å–µ—Ç–∏$(NC)"

permit-join-disable: ## –í—ã–∫–ª—é—á–∏—Ç—å permit_join
	@echo "$(BLUE)üîí –í—ã–∫–ª—é—á–µ–Ω–∏–µ permit_join...$(NC)"
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!$(NC)"; \
		echo "$(YELLOW)üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make env$(NC)"; \
		exit 1; \
	fi
	@echo "$(YELLOW)üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π PERMIT_JOIN –≤ .env...$(NC)"
	@if grep -q "^PERMIT_JOIN=" $(ENV_FILE); then \
		sed -i 's/^PERMIT_JOIN=.*/PERMIT_JOIN=false/' $(ENV_FILE); \
	else \
		echo "PERMIT_JOIN=false" >> $(ENV_FILE); \
	fi
	@echo "$(GREEN)‚úÖ PERMIT_JOIN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ false$(NC)"
	@echo "$(YELLOW)üìù –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...$(NC)"
	@AUTO=true $(MAKE) generate-configs
	@echo "$(YELLOW)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Zigbee2MQTT...$(NC)"
	@$(MAKE) restart-zigbee
	@echo "$(GREEN)‚úÖ Permit join –≤—ã–∫–ª—é—á–µ–Ω$(NC)"
	@echo "$(YELLOW)üí° –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ —Å–µ—Ç–∏$(NC)"

permit-join-temp: ## –í–∫–ª—é—á–∏—Ç—å permit_join –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–≤ –º–∏–Ω—É—Ç–∞—Ö)
	@echo "$(BLUE)‚è∞ –í–∫–ª—é—á–µ–Ω–∏–µ permit_join –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥...$(NC)"
	@if [ -z "$(MINUTES)" ]; then \
		echo "$(RED)‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö$(NC)"; \
		echo "$(YELLOW)üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make permit-join-temp MINUTES=5$(NC)"; \
		exit 1; \
	fi
	@cd scripts && ./permit-join.sh enable-temp $(MINUTES)

permit-join-status: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å permit_join
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ permit_join...$(NC)"
	@cd scripts && ./permit-join.sh status

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
monitor-devices: ## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	@echo "$(BLUE)üì° –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...$(NC)"
	@cd scripts && ./monitor-devices.sh

monitor-devices-all: ## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö MQTT —Å–æ–æ–±—â–µ–Ω–∏–π
	@echo "$(BLUE)üì° –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...$(NC)"
	@cd scripts && ./monitor-devices.sh --all

monitor-devices-filter: ## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
	@echo "$(BLUE)üì° –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º...$(NC)"
	@if [ -z "$(FILTER)" ]; then \
		echo "$(RED)‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∏–ª—å—Ç—Ä$(NC)"; \
		echo "$(YELLOW)üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make monitor-devices-filter FILTER=join$(NC)"; \
		echo "$(BLUE)üìã –ü—Ä–∏–º–µ—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤:$(NC)"; \
		echo "   ‚Ä¢ FILTER=join,left          # –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤"; \
		echo "   ‚Ä¢ FILTER=+join,-error       # –í–∫–ª—é—á–∏—Ç—å 'join', –∏—Å–∫–ª—é—á–∏—Ç—å 'error'"; \
		echo "   ‚Ä¢ FILTER=-permit            # –ò—Å–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Å 'permit'"; \
		exit 1; \
	fi
	@cd scripts && ./monitor-devices.sh --filter "$(FILTER)"



# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
info: ## –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
	@echo "$(BLUE)‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:$(NC)"
	@echo "$(YELLOW)Docker –≤–µ—Ä—Å–∏—è:$(NC)"
	@docker --version
	@echo "$(YELLOW)Docker Compose –∫–æ–º–∞–Ω–¥–∞:$(NC) $(DOCKER_COMPOSE_CMD)"
	@echo "$(YELLOW)–ü—Ä–æ–µ–∫—Ç:$(NC) $(PROJECT_NAME)"
	@echo "$(YELLOW)–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:$(NC) $(PWD)"
	@echo "$(YELLOW)–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:$(NC)"
	@if [ -f $(ENV_FILE) ]; then \
		echo "$(GREEN)‚úÖ –§–∞–π–ª .env –∑–∞–≥—Ä—É–∂–µ–Ω$(NC)"; \
	else \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
	fi
	@echo "$(YELLOW)–í–µ—Ä—Å–∏–∏ –æ–±—Ä–∞–∑–æ–≤:$(NC)"
	@echo "   ‚Ä¢ MQTT Broker: eclipse-mosquitto:2.0.18"
	@echo "   ‚Ä¢ Zigbee2MQTT: koenkk/zigbee2mqtt:1.42.0 (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–æ 2.0)"

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–∞—á–Ω—ã–º MQTT –±—Ä–æ–∫–µ—Ä–æ–º
cloud-mqtt-setup: ## –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–±–ª–∞—á–Ω–æ–º—É MQTT –±—Ä–æ–∫–µ—Ä—É
	@echo "$(BLUE)‚òÅÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—á–Ω–æ–≥–æ MQTT –±—Ä–æ–∫–µ—Ä–∞...$(NC)"
	@cd scripts && ./cloud-mqtt-config.sh

cloud-mqtt-enable: ## –í–∫–ª—é—á–∏—Ç—å –º–æ—Å—Ç –∫ –æ–±–ª–∞—á–Ω–æ–º—É MQTT
	@echo "$(BLUE)‚òÅÔ∏è  –í–∫–ª—é—á–µ–Ω–∏–µ –º–æ—Å—Ç–∞ –∫ –æ–±–ª–∞—á–Ω–æ–º—É MQTT...$(NC)"
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make setup${NC}"; \
		exit 1; \
	fi
	@if grep -q "^CLOUD_MQTT_ENABLED=" $(ENV_FILE); then \
		sed -i 's/^CLOUD_MQTT_ENABLED=.*/CLOUD_MQTT_ENABLED=true/' $(ENV_FILE); \
	else \
		echo "CLOUD_MQTT_ENABLED=true" >> $(ENV_FILE); \
	fi
	@echo "$(GREEN)‚úÖ –ú–æ—Å—Ç –∫ –æ–±–ª–∞—á–Ω–æ–º—É MQTT –≤–∫–ª—é—á–µ–Ω${NC}"
	@echo "$(YELLOW)üí° –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã: make restart${NC}"

cloud-mqtt-disable: ## –û—Ç–∫–ª—é—á–∏—Ç—å –º–æ—Å—Ç –∫ –æ–±–ª–∞—á–Ω–æ–º—É MQTT
	@echo "$(BLUE)‚òÅÔ∏è  –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–æ—Å—Ç–∞ –∫ –æ–±–ª–∞—á–Ω–æ–º—É MQTT...$(NC)"
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"; \
		exit 1; \
	fi
	@if grep -q "^CLOUD_MQTT_ENABLED=" $(ENV_FILE); then \
		sed -i 's/^CLOUD_MQTT_ENABLED=.*/CLOUD_MQTT_ENABLED=false/' $(ENV_FILE); \
	else \
		echo "CLOUD_MQTT_ENABLED=false" >> $(ENV_FILE); \
	fi
	@echo "$(GREEN)‚úÖ –ú–æ—Å—Ç –∫ –æ–±–ª–∞—á–Ω–æ–º—É MQTT –æ—Ç–∫–ª—é—á–µ–Ω${NC}"
	@echo "$(YELLOW)üí° –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã: make restart${NC}"

cloud-mqtt-status: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ—Å—Ç–∞ –∫ –æ–±–ª–∞—á–Ω–æ–º—É MQTT
	@echo "$(BLUE)‚òÅÔ∏è  –°—Ç–∞—Ç—É—Å –º–æ—Å—Ç–∞ –∫ –æ–±–ª–∞—á–Ω–æ–º—É MQTT...$(NC)"
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"; \
		exit 1; \
	fi
	@if grep -q "^CLOUD_MQTT_ENABLED=true" $(ENV_FILE); then \
		echo "$(GREEN)‚úÖ –ú–æ—Å—Ç –∫ –æ–±–ª–∞—á–Ω–æ–º—É MQTT –≤–∫–ª—é—á–µ–Ω${NC}"; \
		echo "$(BLUE)üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:${NC}"; \
		grep "^CLOUD_MQTT_" $(ENV_FILE) | grep -v "PASSWORD" | sed 's/^/   ‚Ä¢ /'; \
		echo ""; \
		echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:${NC}"; \
		if $(DOCKER_COMPOSE_CMD) ps mqtt | grep -q "Up"; then \
			echo "$(GREEN)‚úÖ MQTT –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω${NC}"; \
			echo "$(BLUE)üìã –°—Ç–∞—Ç—É—Å –º–æ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:${NC}"; \
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –º–æ—Å—Ç–µ \
			if $(DOCKER_COMPOSE_CMD) logs --tail=20 mqtt 2>/dev/null | grep -q "bridge"; then \
				echo "$(BLUE)   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –º–æ—Å—Ç–µ:${NC}"; \
				$(DOCKER_COMPOSE_CMD) logs --tail=20 mqtt 2>/dev/null | grep "bridge" | tail -3 | sed 's/^/     ‚Ä¢ /'; \
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è \
				if $(DOCKER_COMPOSE_CMD) logs --tail=50 mqtt 2>/dev/null | grep -q "bridge.*connected\|bridge.*Connected"; then \
					echo "$(GREEN)   ‚úÖ –ú–æ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –æ–±–ª–∞—á–Ω–æ–º—É –±—Ä–æ–∫–µ—Ä—É${NC}"; \
				elif $(DOCKER_COMPOSE_CMD) logs --tail=50 mqtt 2>/dev/null | grep -q "bridge.*failed\|bridge.*error\|bridge.*disconnected"; then \
					echo "$(RED)   ‚ùå –ú–æ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏${NC}"; \
					echo "$(YELLOW)   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –º–æ—Å—Ç–∞:${NC}"; \
					$(DOCKER_COMPOSE_CMD) logs --tail=50 mqtt 2>/dev/null | grep -i "bridge.*error\|bridge.*failed\|bridge.*disconnect" | tail -2 | sed 's/^/     ‚Ä¢ /'; \
				elif $(DOCKER_COMPOSE_CMD) logs --tail=20 mqtt 2>/dev/null | grep -q "PINGREQ\|PINGRESP\|PUBLISH.*bridge"; then \
					echo "$(GREEN)   ‚úÖ –ú–æ—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω (–µ—Å—Ç—å –æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)${NC}"; \
				else \
					echo "$(YELLOW)   ‚ö†Ô∏è  –°—Ç–∞—Ç—É—Å –º–æ—Å—Ç–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω${NC}"; \
				fi; \
			else \
				echo "$(YELLOW)   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –æ –º–æ—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ${NC}"; \
				echo "$(YELLOW)   üí° –í–æ–∑–º–æ–∂–Ω–æ, –º–æ—Å—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"; \
			fi; \
		else \
			echo "$(RED)‚ùå MQTT –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"; \
			echo "$(YELLOW)üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã: make start${NC}"; \
		fi; \
	else \
		echo "$(YELLOW)‚ÑπÔ∏è  –ú–æ—Å—Ç –∫ –æ–±–ª–∞—á–Ω–æ–º—É MQTT –æ—Ç–∫–ª—é—á–µ–Ω${NC}"; \
		echo "$(BLUE)üí° –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make cloud-mqtt-enable${NC}"; \
	fi

cloud-mqtt-test: ## –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ –æ–±–ª–∞—á–Ω—ã–π MQTT –º–æ—Å—Ç
	@echo "$(BLUE)‚òÅÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ –æ–±–ª–∞—á–Ω—ã–π MQTT –º–æ—Å—Ç...$(NC)"
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"; \
		exit 1; \
	fi
	@if ! grep -q "^CLOUD_MQTT_ENABLED=true" $(ENV_FILE); then \
		echo "$(YELLOW)‚ÑπÔ∏è  –ú–æ—Å—Ç –∫ –æ–±–ª–∞—á–Ω–æ–º—É MQTT –æ—Ç–∫–ª—é—á–µ–Ω${NC}"; \
		echo "$(BLUE)üí° –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make cloud-mqtt-enable${NC}"; \
		exit 1; \
	fi
	@if ! command -v mosquitto_pub >/dev/null 2>&1 || ! command -v mosquitto_sub >/dev/null 2>&1; then \
		echo "$(YELLOW)‚ö†Ô∏è  mosquitto-clients –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.${NC}"; \
		echo "$(BLUE)üí° Ubuntu/Debian: sudo apt install mosquitto-clients${NC}"; \
		echo "$(BLUE)üí° CentOS/RHEL: sudo yum install mosquitto-clients${NC}"; \
		exit 1; \
	fi
	@echo "$(YELLOW)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ MQTT –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...$(NC)"
	@if ! $(DOCKER_COMPOSE_CMD) ps mqtt | grep -q "Up"; then \
		echo "$(RED)‚ùå MQTT –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"; \
		echo "$(BLUE)üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã: make start${NC}"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ MQTT –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω${NC}"
	@echo "$(YELLOW)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏...$(NC)"
	@echo ""
	@./scripts/test-cloud-bridge-bidirectional.sh

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±–ª–∞—á–Ω–æ–≥–æ MQTT
cloud-mqtt-credentials: ## –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ MQTT –±—Ä–æ–∫–µ—Ä–∞
	@echo "$(BLUE)üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±–ª–∞—á–Ω–æ–≥–æ MQTT...$(NC)"
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!$(NC)"; \
		echo "$(YELLOW)üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make env$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)üìù –í–≤–µ–¥–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ MQTT –±—Ä–æ–∫–µ—Ä–∞:$(NC)"
	@echo -n "$(YELLOW)–õ–æ–≥–∏–Ω: $(NC)"; \
	read -r username; \
	if [ -z "$$username" ]; then \
		echo "$(RED)‚ùå –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º$(NC)"; \
		exit 1; \
	fi; \
	echo -n "$(YELLOW)–ü–∞—Ä–æ–ª—å: $(NC)"; \
	read password; \
	echo ""; \
	if [ -z "$$password" ]; then \
		echo "$(RED)‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º$(NC)"; \
		exit 1; \
	fi; \
	echo "$(BLUE)üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ .env...$(NC)"; \
	if grep -q "^CLOUD_MQTT_USERNAME=" $(ENV_FILE); then \
		sed -i "s/^CLOUD_MQTT_USERNAME=.*/CLOUD_MQTT_USERNAME=$$username/" $(ENV_FILE); \
	else \
		echo "CLOUD_MQTT_USERNAME=$$username" >> $(ENV_FILE); \
	fi; \
	if grep -q "^CLOUD_MQTT_PASSWORD=" $(ENV_FILE); then \
		sed -i "s/^CLOUD_MQTT_PASSWORD=.*/CLOUD_MQTT_PASSWORD=$$password/" $(ENV_FILE); \
	else \
		echo "CLOUD_MQTT_PASSWORD=$$password" >> $(ENV_FILE); \
	fi; \
	echo "$(GREEN)‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!$(NC)"; \
	echo "$(BLUE)üìù –í–∫–ª—é—á–µ–Ω–∏–µ –æ–±–ª–∞—á–Ω–æ–≥–æ MQTT...$(NC)"; \
	if grep -q "^CLOUD_MQTT_ENABLED=" $(ENV_FILE); then \
		sed -i 's/^CLOUD_MQTT_ENABLED=.*/CLOUD_MQTT_ENABLED=true/' $(ENV_FILE); \
	else \
		echo "CLOUD_MQTT_ENABLED=true" >> $(ENV_FILE); \
	fi; \
	echo "$(GREEN)‚úÖ –û–±–ª–∞—á–Ω—ã–π MQTT –≤–∫–ª—é—á–µ–Ω!$(NC)"; \
	echo "$(BLUE)üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:$(NC)"; \
	echo "   1. –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: make generate-configs"; \
	echo "   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã: make restart"; \
	echo "   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –º–æ—Å—Ç–∞: make cloud-mqtt-status"

mqtt-subscribe: ## –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–æ–ø–∏–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ MQTT (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make mqtt-subscribe TOPIC="zigbee2mqtt/#")
	@echo "$(BLUE)üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ MQTT...$(NC)"
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"; \
		exit 1; \
	fi
	@if ! command -v mosquitto_sub >/dev/null 2>&1; then \
		echo "$(YELLOW)‚ö†Ô∏è  mosquitto-clients –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.${NC}"; \
		echo "$(BLUE)üí° Ubuntu/Debian: sudo apt install mosquitto-clients${NC}"; \
		echo "$(BLUE)üí° CentOS/RHEL: sudo yum install mosquitto-clients${NC}"; \
		exit 1; \
	fi
	@if [ -z "$(TOPIC)" ]; then \
		echo "$(YELLOW)‚ÑπÔ∏è  –¢–æ–ø–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: make mqtt-subscribe TOPIC=\"zigbee2mqtt/#\"${NC}"; \
		echo "$(BLUE)üìã –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–ø–∏–∫–æ–≤:${NC}"; \
		echo "   ‚Ä¢ zigbee2mqtt/# (–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è Zigbee2MQTT)"; \
		echo "   ‚Ä¢ zigbee2mqtt/bridge/state (—Å—Ç–∞—Ç—É—Å –º–æ—Å—Ç–∞)"; \
		echo "   ‚Ä¢ zigbee2mqtt/bridge/devices (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)"; \
		echo "   ‚Ä¢ zigbee2mqtt/+/state (—Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤)"; \
		echo "   ‚Ä¢ # (–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è)"; \
		exit 1; \
	fi
	@echo "$(YELLOW)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ MQTT –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...$(NC)"
	@if ! $(DOCKER_COMPOSE_CMD) ps mqtt | grep -q "Up"; then \
		echo "$(RED)‚ùå MQTT –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"; \
		echo "$(BLUE)üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã: make start${NC}"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ MQTT –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω${NC}"
	@echo "$(BLUE)üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫: $(TOPIC)${NC}"
	@echo "$(YELLOW)üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C${NC}"
	@echo ""
	@mosquitto_sub -h localhost -p 1883 -u admin -P admin -t "$(TOPIC)" -v 

mqtt-publish: ## –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π MQTT (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make mqtt-publish TOPIC="test/topic" MESSAGE="Hello World")
	@echo "$(BLUE)üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π MQTT...$(NC)"
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"; \
		exit 1; \
	fi
	@if ! command -v mosquitto_pub >/dev/null 2>&1; then \
		echo "$(YELLOW)‚ö†Ô∏è  mosquitto-clients –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.${NC}"; \
		echo "$(BLUE)üí° Ubuntu/Debian: sudo apt install mosquitto-clients${NC}"; \
		echo "$(BLUE)üí° CentOS/RHEL: sudo yum install mosquitto-clients${NC}"; \
		exit 1; \
	fi
	@if [ -z "$(TOPIC)" ]; then \
		echo "$(YELLOW)‚ÑπÔ∏è  –¢–æ–ø–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: make mqtt-publish TOPIC=\"test/topic\" MESSAGE=\"Hello World\"${NC}"; \
		echo "$(BLUE)üìã –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:${NC}"; \
		echo "   ‚Ä¢ make mqtt-publish TOPIC=\"test/topic\" MESSAGE=\"Hello World\"${NC}"; \
		echo "   ‚Ä¢ make mqtt-publish TOPIC=\"zigbee2mqtt/bridge/request/restart\" MESSAGE=\"\"${NC}"; \
		echo "   ‚Ä¢ make mqtt-publish TOPIC=\"zigbee2mqtt/bridge/request/backup\" MESSAGE=\"\"${NC}"; \
		exit 1; \
	fi
	@if [ -z "$(MESSAGE)" ] && [ "$(MESSAGE)" != "" ]; then \
		echo "$(YELLOW)‚ÑπÔ∏è  –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: make mqtt-publish TOPIC=\"test/topic\" MESSAGE=\"Hello World\"${NC}"; \
		exit 1; \
	fi
	@echo "$(YELLOW)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ MQTT –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...$(NC)"
	@if ! $(DOCKER_COMPOSE_CMD) ps mqtt | grep -q "Up"; then \
		echo "$(RED)‚ùå MQTT –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"; \
		echo "$(BLUE)üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã: make start${NC}"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ MQTT –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω${NC}"
	@echo "$(BLUE)üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —Ç–æ–ø–∏–∫: $(TOPIC)${NC}"
	@echo "$(BLUE)üìù –°–æ–æ–±—â–µ–Ω–∏–µ: $(MESSAGE)${NC}"
	@echo ""
	@if mosquitto_pub -h localhost -p 1883 -u admin -P admin -t "$(TOPIC)" -m "$(MESSAGE)"; then \
		echo "$(GREEN)‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!${NC}"; \
	else \
		echo "$(RED)‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è${NC}"; \
		exit 1; \
	fi

 